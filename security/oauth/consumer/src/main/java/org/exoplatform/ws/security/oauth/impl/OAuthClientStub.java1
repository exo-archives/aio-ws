/**
 * Copyright (C) 2003-2008 eXo Platform SAS.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see<http://www.gnu.org/licenses/>.
 */

package org.exoplatform.ws.security.oauth.impl;

import org.exoplatform.ws.security.oauth.ExoOAuthClient;
import org.exoplatform.ws.security.oauth.OAuthProviderService;

import net.oauth.OAuthAccessor;
import net.oauth.OAuthConsumer;

/**
 * @author <a href="mailto:andrew00x@gmail.com">Andrey Parfonov</a>
 * @version $Id: $
 */
public class OAuthClientStub implements ExoOAuthClient {
  
  // Get OAuthProvider directly here.
  // Provider and Consumer work on the same machine, but they can be deployed
  // on different machines. In that case Consumer must ask Provider about
  // access via HTTP, HTTPS etc.
  // This is simple implementation. 
  // If Provider and Consumer deployed on different machine and 
  // connected via HTTP, then Consumer and Provider secret key should be used.
  // Secret key should be used for subscribe all messages to be sure messages
  // are not spurious.   
  public final OAuthProviderService oauthProvider_;
  
  public OAuthClientStub(OAuthProviderService oauthProvider) {
    oauthProvider_ = oauthProvider;
  }

  /* (non-Javadoc)
   * @see net.oauth.client.OAuthClient#getRequestToken(net.oauth.OAuthAccessor)
   */
  public void getRequestToken(OAuthAccessor accessor) throws Exception {
    OAuthConsumer consumer = oauthProvider_.getConsumer(
        (String) accessor.consumer.getProperty("name"));
    OAuthAccessor accessor2 = new OAuthAccessor(consumer);
    oauthProvider_.generateRequestToken(accessor2);
    accessor.requestToken = accessor2.requestToken;
    accessor.tokenSecret = accessor2.tokenSecret;
    accessor.accessToken = null;
  }
  
  /* (non-Javadoc)
   * @see org.exoplatform.ws.security.oauth.ExoOAuthClient#getAccessToken(
   * net.oauth.OAuthAccessor)
   */
  public void getAccessToken(OAuthAccessor accessor) throws Exception {
    OAuthConsumer consumer = oauthProvider_.getConsumer(
        (String) accessor.consumer.getProperty("name"));
    OAuthAccessor accessor2 = new OAuthAccessor(consumer);
    accessor2.requestToken = accessor.requestToken;
    accessor2.tokenSecret = accessor.tokenSecret;
    oauthProvider_.generateAccessToken(accessor2);
    accessor.accessToken = accessor2.accessToken;
    accessor.tokenSecret = accessor2.tokenSecret;
    accessor.requestToken = null;
  }

}
