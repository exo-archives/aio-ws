/**
 * Copyright (C) 2003-2008 eXo Platform SAS.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see<http://www.gnu.org/licenses/>.
 */

package org.exoplatform.ws.rest.ejbconnector21;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;

import javax.ejb.EJBException;
import javax.ejb.SessionBean;
import javax.ejb.SessionContext;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import org.apache.commons.logging.Log;
import org.exoplatform.container.ExoContainer;
import org.exoplatform.container.ExoContainerContext;
import org.exoplatform.container.RootContainer;
import org.exoplatform.services.log.ExoLogger;
import org.exoplatform.services.rest.ext.transport.SerialRequest;
import org.exoplatform.services.rest.ext.transport.SerialResponse;
import org.exoplatform.services.rest.impl.ContainerRequest;
import org.exoplatform.services.rest.impl.ContainerResponse;
import org.exoplatform.services.rest.RequestHandler;

/**
 * @author <a href="mailto:andrew00x@gmail.com">Andrey Parfonov</a>
 * @version $Id: $
 */
public class RestEJBConnectorBean implements SessionBean {

  /**
   * Generated by Eclipse.
   */
  private static final long serialVersionUID = 234765347623L;

  /**
   * Logger.
   */
  private static final Log  LOG              = ExoLogger.getLogger(RestEJBConnectorBean.class);

  /**
   * Session context.
   */
  private SessionContext    context;

  /**
   * Portal container name.
   */
  private String            containerName;

  /**
   * @see {@link RestEJBConnector#service(SerialRequest)} {@inheritDoc}
   */
  public final SerialResponse service(final SerialRequest request) throws IOException {

    try {
      InitialContext ctx = new InitialContext();
      containerName = (String) ctx.lookup("java:comp/env/exo.container.name");
    } catch (NamingException e1) {
      LOG.error("Can't construct an initial context or get portal container name. ");
    }

    RequestHandler handler = (RequestHandler) getContainer().getComponentInstanceOfType(RequestHandler.class);

    if (handler == null) {
      LOG.error("RequestHandler not found in container!");
      throw new EJBException("RequestHandler not found in container!");
    }

    try {

      InputStream data = request.getData() != null ? request.getData().getStream() : null;

      ContainerRequest restRequest = new EJBContainerRequest(request.getMethod(),
                                                             request.getUri(),
                                                             new URI(""),
                                                             data,
                                                             request.getHeaders(),
                                                             context);
      SerialResponse response = new SerialResponse();

      EJBContainerResponseWriter writer = new EJBContainerResponseWriter(response);
      ContainerResponse restResponse = new ContainerResponse(writer);

      handler.handleRequest(restRequest, restResponse);

      return response;

    } catch (Exception e) {
      LOG.error("This request can't be serve by service. Check request parameters and try again.");
      throw new EJBException("This request can't be serve!", e);
    }
  }

  /**
   * {@inheritDoc}
   */
  public void ejbPassivate() {
    // nothing to do here
  }

  /**
   * {@inheritDoc}
   */
  public void ejbActivate() {
    // nothing to do here
  }

  /**
   * {@inheritDoc}
   */
  public void ejbRemove() {
    // nothing to do here
  }

  /**
   * {@inheritDoc}
   */
  public void setSessionContext(SessionContext context) {
    this.context = context;
  }

  /**
   * required by ejb spec.
   */
  public void ejbCreate() {
    // nothing to do here
  }

  /**
   * @return the instance of ExoContainer.
   */
  protected ExoContainer getContainer() {
    ExoContainer container = ExoContainerContext.getCurrentContainer();
    if (container instanceof RootContainer)
      return RootContainer.getInstance().getPortalContainer(containerName);

    return container;
  }

}
