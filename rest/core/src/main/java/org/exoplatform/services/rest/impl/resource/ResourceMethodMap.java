/**
 * Copyright (C) 2003-2008 eXo Platform SAS.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see<http://www.gnu.org/licenses/>.
 */

package org.exoplatform.services.rest.impl.resource;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;

import javax.ws.rs.core.MediaType;

import org.exoplatform.services.rest.impl.header.MediaTypeHelper;
import org.exoplatform.services.rest.resource.ResourceMethodDescriptor;

/**
 * Keeps collections of {@link ResourceMethodDescriptor} for each HTTP method,
 * e. g. GET, POST, etc. Each collection of ResourceMethodDescriptor is sorted
 * by media types, See {@link #COMPARATOR}.
 * 
 * @author <a href="mailto:andrew00x@gmail.com">Andrey Parfonov</a>
 * @version $Id: $
 */
public final class ResourceMethodMap
    extends HashMap<String, List<ResourceMethodDescriptor>> {
  
  ResourceMethodMap() {
  }

  /**
   * Generated by Eclipse.
   */
  private static final long serialVersionUID = -3905800364325544789L;

  /**
   * Get {@link List} with specified key. If it does not exist new one be
   * created.
   * 
   * @param httpMethod a HTTP method name
   * @return {@link List} of {@link ResourceMethodDescriptor}
   */
  public List<ResourceMethodDescriptor> getList(String httpMethod) {
    List<ResourceMethodDescriptor> l = get(httpMethod);
    if (l == null) {
      l = new ArrayList<ResourceMethodDescriptor>();
      put(httpMethod, l);
    }
    return l;
  }
  
  /**
   * Sort each collections in map.
   */
  // NOTE not able to use SortedSet instead List
  // (the same elements ignored to add in map)
  public void sort() {
    for (List<ResourceMethodDescriptor> l : values())
      Collections.sort(l, COMPARATOR);
  }
  
  public Collection<String> getAllow() {
    return keySet();
  }
  
  //
  
  /**
   * Compare list of media types. Each list should be already sorted by
   * {@link MediaTypeHelper#MEDIA_TYPE_COMPARATOR}. So it is enough to compare
   * only last media types in the list. Last media types is the least precise.
   */
  private static final Comparator<ResourceMethodDescriptor> COMPARATOR =
      new Comparator<ResourceMethodDescriptor>() {

    public int compare(ResourceMethodDescriptor o1, ResourceMethodDescriptor o2) {
      int r = MediaTypeHelper.MEDIA_TYPE_COMPARATOR.compare(getLast(o1.consumes()),
                                                            getLast(o2.consumes()));
      if (r == 0)
        r = MediaTypeHelper.MEDIA_TYPE_COMPARATOR.compare(getLast(o1.produces()),
                                                          getLast(o2.produces()));
      return r;
    }
    
    private MediaType getLast(List<MediaType> l) {
      return l.get(l.size() - 1);
    }
    
  };

}
